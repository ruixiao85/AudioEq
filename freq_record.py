#!/usr/bin/env python
import argparse
parser = argparse.ArgumentParser("Process something")
parser.add_argument("-d", "--directory", default="db", type=str, help="output directory.")
parser.add_argument("-f", "--filename", default=None, type=str, help="output filename, default to datetime if not entered.")
parser.add_argument("-w", "--wait-sec", default=5, type=int, help="wait time in second between specifying the filename and testing/recording.")
parser.add_argument("--debug", default=False, action='store_true', help="flag to run in debug mode.")
args=parser.parse_args()

import os, sys
import logging
os.makedirs(args.directory, exist_ok=True)

# conda create -n sound python-sounddevice numpy -c conda-forge
import sounddevice as sd
import numpy as np
import math

def print_sound(indata, outdata, frames, time, status):
  volume_norm=np.linalg.norm(indata)*10
  logging.info(f"- {volume_norm}")
  # print ("|" * int(volume_norm))

import winsound
# winsound.Beep(1000, 1000) # 37 - 32,767Hz
# generate_sound=winsound.Beep

from pyaudio import PyAudio # sudo apt-get install python{,3}-pyaudio
def sine_tone(frequency, duration, volume=1, sample_rate=96000): # 22050
  n_samples = int(sample_rate * duration)
  restframes = n_samples % sample_rate
  p = PyAudio()
  stream = p.open(format=p.get_format_from_width(1), # 8bit
                  channels=1, # mono
                  rate=sample_rate,
                  output=True)
  s = lambda t: volume * math.sin(2 * math.pi * frequency * t / sample_rate)
  samples = (int(s(t) * 0x7f + 0x80) for t in range(n_samples))
  for buf in zip(*[samples]*sample_rate): # write several samples at a time
      stream.write(bytes(bytearray(buf)))
  # fill remainder of frameset with silence
  stream.write(b'\x80' * restframes)
  stream.stop_stream()
  stream.close()

def sine_tone_ms(frequency, duration, volume=1, sample_rate=96000):
  sine_tone(frequency, 0.001*duration, volume, sample_rate)


generate_sound=sine_tone_ms

generate_sound(1000, 1000)
# generate_sound(15000, 1000) # require higher sample rate > 22050
# generate_sound(18000, 1000)

from datetime import datetime
if not args.filename:
  args.filename=datetime.now().strftime("%m%d%YT%H%M%S")

fi=input(f"did it just sound for 1 second? Cancel if not working. If you want to use [{args.filename}], press enter. Otherwise, please specify the output file name here:")
if fi and len(fi)>0:
  args.filename=fi

import time
print(f"wait for {args.wait_sec} seconds, so you can exit out of the room or get ready to keep quiet.", flush=True)
for i in range(args.wait_sec):
  time.sleep(1)
  print(f"{args.wait_sec-i}", flush=True)

generate_sound(1000, 1000) # start

logging.basicConfig(
  level=logging.INFO,
  format="%(asctime)s [%(levelname)s] %(message)s",
  handlers=[
    logging.FileHandler(f"{args.directory}/freq_{args.filename}.log"),
    logging.StreamHandler()
  ]
)

if args.debug:
  print("running in debug mode with very few frequencies.")
  freqs=[500,1000,2000,4000] # debug
else:
  print("running in complete mode with full spectrum.")
  freqs=[
    20.00,20.20,20.40,20.61,20.81,21.02,21.23,21.44,21.66,21.87,22.09,22.31,22.54,22.76,22.99,23.22,23.45,23.69,23.92,24.16,24.40,24.65,24.89,25.14,25.39,25.65,25.91,26.16,26.43,26.69,26.96,27.23,27.50,27.77,28.05,28.33,28.62,28.90,29.19,29.48,29.78,30.08,30.38,30.68,30.99,31.30,31.61,31.93,32.24,32.57,32.89,33.22,33.55,33.89,34.23,34.57,34.92,35.27,35.62,35.97,36.33,36.70,37.06,37.43,37.81,38.19,38.57,38.95,39.34,39.74,40.14,40.54,40.94,41.35,41.76,42.18,42.60,43.03,43.46,43.90,44.33,44.78,45.23,45.68,46.13,46.60,47.06,47.53,48.01,48.49,48.97,49.46,49.96,50.46,50.96,51.47,51.99,52.51,53.03,53.56,54.10,54.64,55.18,55.74,56.29,56.86,57.42,58.00,58.58,59.16,59.76,60.35,60.96,61.57,62.18,62.80,63.43,64.07,64.71,65.35,66.01,66.67,67.33,68.01,68.69,69.37,70.07,70.77,71.48,72.19,72.91,73.64,74.38,75.12,75.87,76.63,77.40,78.17,78.95,79.74,80.54,81.35,82.16,82.98,83.81,84.65,85.50,86.35,87.22,88.09,88.97,89.86,90.76,91.66,92.58,93.51,94.44,95.39,96.34,97.30,98.28,99.26,100.25,101.25,102.27,103.29,104.32,105.37,106.42,107.48,108.56,109.64,110.74,111.85,112.97,114.10,115.24,116.39,117.55,118.73,119.92,121.12,122.33,123.55,124.79,126.03,127.29,128.57,129.85,131.15,132.46,133.79,135.12,136.48,137.84,139.22,140.61,142.02,143.44,144.87,146.32,147.78,149.26,150.75,152.26,153.78,155.32,156.88,158.44,160.03,161.63,163.24,164.88,166.53,168.19,169.87,171.57,173.29,175.02,176.77,178.54,180.32,182.13,183.95,185.79,187.65,189.52,191.42,193.33,195.27,197.22,199.19,201.18,203.19,205.23,207.28,209.35,211.44,213.56,215.69,217.85,220.03,222.23,224.45,226.70,228.96,231.25,233.57,235.90,238.26,240.64,243.05,245.48,247.93,250.41,252.92,255.45,258.00,260.58,263.19,265.82,268.48,271.16,273.87,276.61,279.38,282.17,284.99,287.84,290.72,293.63,296.57,299.53,302.53,305.55,308.61,311.69,314.81,317.96,321.14,324.35,327.59,330.87,334.18,337.52,340.90,344.30,347.75,351.23,354.74,358.28,361.87,365.49,369.14,372.83,376.56,380.33,384.13,387.97,391.85,395.77,399.73,403.72,407.76,411.84,415.96,420.12,424.32,428.56,432.85,437.18,441.55,445.96,450.42,454.93,459.48,464.07,468.71,473.40,478.13,482.91,487.74,492.62,497.55,502.52,507.55,512.62,517.75,522.93,528.16,533.44,538.77,544.16,549.60,555.10,560.65,566.25,571.92,577.64,583.41,589.25,595.14,601.09,607.10,613.17,619.30,625.50,631.75,638.07,644.45,650.89,657.40,663.98,670.62,677.32,684.10,690.94,697.85,704.83,711.87,718.99,726.18,733.44,740.78,748.19,755.67,763.23,770.86,778.57,786.35,794.22,802.16,810.18,818.28,826.46,834.73,843.08,851.51,860.02,868.62,877.31,886.08,894.94,903.89,912.93,922.06,931.28,940.59,950.00,959.50,969.09,978.78,988.57,998.46,1008.44,1018.53,1028.71,1039.00,1049.39,1059.88,1070.48,1081.19,1092.00,1102.92,1113.95,1125.09,1136.34,1147.70,1159.18,1170.77,1182.48,1194.30,1206.25,1218.31,1230.49,1242.80,1255.22,1267.78,1280.45,1293.26,1306.19,1319.25,1332.45,1345.77,1359.23,1372.82,1386.55,1400.41,1414.42,1428.56,1442.85,1457.28,1471.85,1486.57,1501.43,1516.45,1531.61,1546.93,1562.40,1578.02,1593.80,1609.74,1625.84,1642.10,1658.52,1675.10,1691.85,1708.77,1725.86,1743.12,1760.55,1778.15,1795.94,1813.90,1832.03,1850.36,1868.86,1887.55,1906.42,1925.49,1944.74,1964.19,1983.83,2003.67,2023.71,2043.94,2064.38,2085.03,2105.88,2126.94,2148.20,2169.69,2191.38,2213.30,2235.43,2257.78,2280.36,2303.17,2326.20,2349.46,2372.95,2396.68,2420.65,2444.86,2469.31,2494.00,2518.94,2544.13,2569.57,2595.27,2621.22,2647.43,2673.90,2700.64,2727.65,2754.93,2782.48,2810.30,2838.40,2866.79,2895.46,2924.41,2953.65,2983.19,3013.02,3043.15,3073.58,3104.32,3135.36,3166.72,3198.38,3230.37,3262.67,3295.30,3328.25,3361.53,3395.15,3429.10,3463.39,3498.03,3533.01,3568.34,3604.02,3640.06,3676.46,3713.22,3750.36,3787.86,3825.74,3864.00,3902.64,3941.66,3981.08,4020.89,4061.10,4101.71,4142.73,4184.15,4226.00,4268.26,4310.94,4354.05,4397.59,4441.56,4485.98,4530.84,4576.15,4621.91,4668.13,4714.81,4761.96,4809.58,4857.67,4906.25,4955.31,5004.87,5054.91,5105.46,5156.52,5208.08,5260.16,5312.77,5365.89,5419.55,5473.75,5528.49,5583.77,5639.61,5696.00,5752.96,5810.49,5868.60,5927.28,5986.56,6046.42,6106.89,6167.96,6229.64,6291.93,6354.85,6418.40,6482.58,6547.41,6612.88,6679.01,6745.80,6813.26,6881.39,6950.21,7019.71,7089.91,7160.81,7232.41,7304.74,7377.79,7451.56,7526.08,7601.34,7677.35,7754.13,7831.67,7909.98,7989.08,8068.98,8149.67,8231.16,8313.47,8396.61,8480.57,8565.38,8651.03,8737.54,8824.92,8913.17,9002.30,9092.32,9183.25,9275.08,9367.83,9461.51,9556.12,9651.68,9748.20,9845.68,9944.14,10043.58,10144.02,10245.46,10347.91,10451.39,10555.91,10661.46,10768.08,10875.76,10984.52,11094.36,11205.31,11317.36,11430.53,11544.84,11660.29,11776.89,11894.66,12013.60,12133.74,12255.08,12377.63,12501.41,12626.42,12752.68,12880.21,13009.01,13139.10,13270.49,13403.20,13537.23,13672.60,13809.33,13947.42,14086.90,14227.77,14370.04,14513.74,14658.88,14805.47,14953.52,15103.06,15254.09,15406.63,15560.70,15716.30,15873.47,16032.20,16192.52,16354.45,16517.99,16683.17,16850.01,17018.51,17188.69,17360.58,17534.18,17709.53,17886.62,18065.49,18246.14,18428.60,18612.89,18799.02,18987.01,19176.88,19368.65,19562.33,19757.96,19955.54
  ]

import threading
itvl=1000 # did not wwrk if <1000ms
cntr=0.3
for freq in freqs:
  t=threading.Thread(target=generate_sound, args=(int(round(freq)), itvl), daemon=True)
  t.start()
  logging.info(f"{freq}:")
  time.sleep(int(itvl*(1-cntr))/2000.0)
  with sd.Stream(callback=print_sound):
    sd.sleep(int(itvl*cntr))
  time.sleep(int(itvl*(1-cntr))/2000.0)
  t.join()

generate_sound(1000, 1000) # end
